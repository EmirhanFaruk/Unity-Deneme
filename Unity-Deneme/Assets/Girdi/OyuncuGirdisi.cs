//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Girdi/OyuncuGirdisi.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OyuncuGirdisi: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OyuncuGirdisi()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OyuncuGirdisi"",
    ""maps"": [
        {
            ""name"": ""Ayakta"",
            ""id"": ""f2c1567c-01fb-4b9d-8a90-d567599ab05e"",
            ""actions"": [
                {
                    ""name"": ""Hareket"",
                    ""type"": ""Value"",
                    ""id"": ""c15ff7e4-0caf-47a3-b018-48297c0a27d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zipla"",
                    ""type"": ""Button"",
                    ""id"": ""9c3b904e-8837-4190-b3f8-f7292674e47c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f0836b53-4f19-4d5a-9f1e-ad50c08c2ad3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7c3258f7-609f-424a-90eb-1db30206fcd3"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""805ddceb-8d9b-4c6a-8fe3-f082874affcb"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""96d303fa-4247-4b06-ab71-a4dacb73ed90"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb0259f8-e15f-44a6-b44e-45e029b4c01b"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d730b787-1a92-4e11-8f6b-2a717753c4da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zipla"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ayakta
        m_Ayakta = asset.FindActionMap("Ayakta", throwIfNotFound: true);
        m_Ayakta_Hareket = m_Ayakta.FindAction("Hareket", throwIfNotFound: true);
        m_Ayakta_Zipla = m_Ayakta.FindAction("Zipla", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ayakta
    private readonly InputActionMap m_Ayakta;
    private List<IAyaktaActions> m_AyaktaActionsCallbackInterfaces = new List<IAyaktaActions>();
    private readonly InputAction m_Ayakta_Hareket;
    private readonly InputAction m_Ayakta_Zipla;
    public struct AyaktaActions
    {
        private @OyuncuGirdisi m_Wrapper;
        public AyaktaActions(@OyuncuGirdisi wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hareket => m_Wrapper.m_Ayakta_Hareket;
        public InputAction @Zipla => m_Wrapper.m_Ayakta_Zipla;
        public InputActionMap Get() { return m_Wrapper.m_Ayakta; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AyaktaActions set) { return set.Get(); }
        public void AddCallbacks(IAyaktaActions instance)
        {
            if (instance == null || m_Wrapper.m_AyaktaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AyaktaActionsCallbackInterfaces.Add(instance);
            @Hareket.started += instance.OnHareket;
            @Hareket.performed += instance.OnHareket;
            @Hareket.canceled += instance.OnHareket;
            @Zipla.started += instance.OnZipla;
            @Zipla.performed += instance.OnZipla;
            @Zipla.canceled += instance.OnZipla;
        }

        private void UnregisterCallbacks(IAyaktaActions instance)
        {
            @Hareket.started -= instance.OnHareket;
            @Hareket.performed -= instance.OnHareket;
            @Hareket.canceled -= instance.OnHareket;
            @Zipla.started -= instance.OnZipla;
            @Zipla.performed -= instance.OnZipla;
            @Zipla.canceled -= instance.OnZipla;
        }

        public void RemoveCallbacks(IAyaktaActions instance)
        {
            if (m_Wrapper.m_AyaktaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAyaktaActions instance)
        {
            foreach (var item in m_Wrapper.m_AyaktaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AyaktaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AyaktaActions @Ayakta => new AyaktaActions(this);
    public interface IAyaktaActions
    {
        void OnHareket(InputAction.CallbackContext context);
        void OnZipla(InputAction.CallbackContext context);
    }
}
